# This module makes use of DeepVariantPrediction at
# https://github.com/CreRecombinase/DeepVariantPrediction/tree/issue1
# It generate the configfile that is ready to be used in the above pipeline

def get_all_outputs(config):
    out = []
    for f in config['deep_variant']['label']['entry'].keys():
        out.append('scores/{bed}/{model}/merged.{feature}.score.gz'.format(feature=f,
        model=config['deep_variant']['model_tag'],
        bed=config['name']))
    return out

def step1_sbatchs(config):
    out = []
    for i in range(config[config['name']]['number_of_chunk']):
        out.append('sbatch/{bed}/prepare_input.{model_tag}.chunk_{i}.sbatch'.format(i=i,
        bed=config['name'],
        model_tag=config['deep_variant']['model_tag']))
    return out

rule all:
    input:
        get_all_outputs(config)

rule step1:
    input:
        step1_sbatchs(config)

def label_string(label):
    white = '  '
    string = white + label['group_name'] + ':'
    for i in label['entry'].keys():
        string = string + '\n{white}{white}{name}: {idx}'.format(white=white, name=i, idx=label['entry'][i])
    return string

rule gen_config:
    input:
        '../bed2input/chunks/{bed}/chunk_{i}.input.gz'
    params:
        label_string = label_string(config['deep_variant']['label']),
        snakemake_dir = config['snakemake_dir']
    output:
        'configs/{bed}/config.{model_tag}.chunk_{i}.yaml'
    run:
        import re
        input_name = re.sub('\.\.', params.snakemake_dir, input[0])
        config_str = '''data_name: '{taskname}-chunk-{i}'
data:
  {taskname}-chunk-{i}:
    name: '{input_name}'
    method: '_formatting_genomewide_annotation.snakemake'
    check_reference: '0'  # Don't check the reference allele validity
window_size: 1000 # Attention: this should match the window size of the model below
model:
  name: '{model_name}'
  snakemake: 'modules/submodules/input2score/_train_model_do_nothing.snakemake'
  workdir: '{model_path}'
label:
{label_string}
genome_assembly:
  fasta: '{fasta}'
  size: '{size}'
performance:
  mode1:
    method: '_histogram.snakemake'
    params: 'some other input here'
bed_list: ''
cadd: ''
'''.format(taskname=wildcards.bed,
i=wildcards.i,
label_string=params.label_string,
model_name=config['deep_variant'][wildcards.model_tag]['name'],
model_path=config['deep_variant'][wildcards.model_tag]['path'],
fasta=config['genome_assembly']['fasta'],
size=config['genome_assembly']['size'],
input_name=input_name,
snakemake_dir=params.snakemake_dir)
        o = open(output[0], 'w')
        o.write(config_str)
        o.close()

rule gen_sbatch:
    input:
        '../bed2input/chunks/{bed}/chunk_{i}.input.gz',
        'configs/{bed}/config.{model_tag}.chunk_{i}.yaml'
    params:
        label_string = label_string(config['deep_variant']['label']),
        snakemake_dir = config['snakemake_dir']
    output:
        'sbatch/{bed}/prepare_input.{model_tag}.chunk_{i}.sbatch'
    run:
        sbatch = '''#!/bin/bash
#SBATCH --job-name={i}-{bed}-{model_tag}.var2in
#SBATCH --output={i}-{bed}-{model_tag}.var2in.out
#SBATCH --error={i}-{bed}-{model_tag}.var2in.err
#SBATCH --time=24:00:00
#SBATCH --partition=broadwl
#SBATCH --mem-per-cpu=50G
#SBATCH --nodes=1

cd /project2/xinhe/yanyul
source setup.sh
source activate deepvarpred_test
# module load cuda/7.5 # load cuda dependency for theano to run on GPU. Now we use the default cuda library on RCC (v4.0)
cd deep_variant/nick/DeepVariantPrediction

# snakemake --unlock sbatch/{model_name}.{bed}-chunk-{i}.allele1.sbatch sbatch/{model_name}.{bed}-chunk-{i}.allele2.sbatch --configfile {snakemake_dir}/input2score-deep_variant/{config_yaml}
# snakemake sbatch/{model_name}.{bed}-chunk-{i}.allele1.sbatch sbatch/{model_name}.{bed}-chunk-{i}.allele2.sbatch --configfile {snakemake_dir}/input2score-deep_variant/{config_yaml} --rerun-incomplete
snakemake --configfile {snakemake_dir}/input2score-deep_variant/{config_yaml} score_sbatch --unlock
snakemake --configfile {snakemake_dir}/input2score-deep_variant/{config_yaml} score_sbatch --rerun-incomplete
cd sbatch
sbatch {model_name}.{bed}-chunk-{i}.allele1.sbatch
sbatch {model_name}.{bed}-chunk-{i}.allele2.sbatch
'''.format(i=wildcards.i,
           bed=wildcards.bed,
           model_tag=wildcards.model_tag,
           config_yaml=input[1],
           snakemake_dir=config['snakemake_dir'],
           model_name=config['deep_variant'][wildcards.model_tag]['name'])
        o = open(output[0], 'w')
        o.write(sbatch)
        o.close()

rule output2score:
    input:
        a1 = lambda wildcards: '{path}/score/{model_name}/{bed}-chunk-{i}_allele1.hdf5'.format(path=config['deep_variant']['path_to_annotation'], model_name=config['deep_variant'][wildcards.model_tag]['name'], bed=wildcards.bed, i=wildcards.i),
        a2 = lambda wildcards: '{path}/score/{model_name}/{bed}-chunk-{i}_allele2.hdf5'.format(path=config['deep_variant']['path_to_annotation'], model_name=config['deep_variant'][wildcards.model_tag]['name'], bed=wildcards.bed, i=wildcards.i),
        passed = '{path}/data/{{bed}}-chunk-{{i}}.formatted.filter_by_size.pass.reorder'.format(path=config['deep_variant']['path_to_annotation'])
    output:
        [ 'scores/{{bed}}/{{model_tag}}/chunk_{{i}}.{feature}.score.gz'.format(feature=feature) for feature in config['deep_variant']['label']['entry'].keys() ]
    params:
        labels = [ feature for feature in config['deep_variant']['label']['entry'].keys() ],
        idxs = [ config['deep_variant']['label']['entry'][feature] for feature in config['deep_variant']['label']['entry'].keys() ],
        prefix = 'scores/{bed}/{model_tag}/chunk_{i}'
    shell:
        'python scripts/output2score.py --input_passed {input.passed}  --input_allele1 {input.a1} --input_allele2 {input.a2} --out_prefix {params.prefix} --labels {params.labels} --idxs {params.idxs}'

rule merge_and_sort:
    input:
        files = lambda wildcards: [ 'scores/{bed}/{model_tag}/chunk_{i}.{feature}.score.gz'.format(i=i, model_tag=wildcards.model_tag, bed=wildcards.bed, feature=wildcards.feature) for i in range(config[wildcards.bed]['number_of_chunk']) ]
    output:
        'scores/{bed}/{model_tag}/merged.{feature}.score.gz'
    shell:
        'bedtools sort -i <(cat {input.files} | zcat) > {output[0]}'
